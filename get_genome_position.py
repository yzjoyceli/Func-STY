#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
from pandas import DataFrame
import Bio
from Bio import SeqIO
from pandas import Series
import argparse


# In[ ]:


#define arguments


# In[ ]:


parser = argparse.ArgumentParser()
parser.add_argument(
    '-f',help='input genome fasta file')
parser.add_argument(
    '-g',help='input gft annotation file')
parser.add_argument(
    '-p',help='input aa position file')
parser.add_argument(
    '-c',help='aa codon',nargs='+',type=str)
parser.add_argument(
    '-nsp',help='output with aa position beyond splicing site')
parser.add_argument(
    '-sp12',help='output with aa position with 1_23 splicing')
parser.add_argument(
    '-sp23',help='output with aa position with 12_3 splicing')

args = vars(parser.parse_args())


# In[ ]:





# In[2]:


#get genome fasta file


# In[3]:


chrlist = [''.join(['chr', str(i)]) for i in list(range(1, 23)) + ['X', 'Y']]

fa = dict()
for record in SeqIO.parse(args['f'],'fasta'):
    if record.id in chrlist:
        fa[record.id] = record


# In[4]:


#get gtf annotation file and select chr in chrlist


# In[5]:


anno = pd.read_csv(args['g'],header=None,sep='\t')


# In[6]:


anno = anno.iloc[:,[0,2,3,4,6,9,10]]


# In[7]:


anno.columns = ['chr','feature','start','end','strand','gene_name','transcript_id']


# In[8]:


anno = anno.drop_duplicates()


# In[9]:


anno = anno[anno['chr'].isin(chrlist)]


# In[10]:


#select cds information in annotation file and caculate length for each cds


# In[11]:


cds_anno = anno[anno['feature']=='CDS']


# In[12]:


cds_anno.loc[:,'length'] = cds_anno['end'] - cds_anno['start'] + 1


# In[13]:


#get aa position file generated by step1 


# In[14]:


aa_pos = pd.read_csv(args['p'],sep='\t')


# In[15]:


aa_pos.columns = ['id','pro_id','gene_name','position']


# In[16]:


#get relative position of three bases for each codon in cds


# In[17]:


aa_pos.loc[:,'1nt_pos'] = aa_pos['position'] * 3 - 2
aa_pos.loc[:,'2nt_pos'] = aa_pos['position'] * 3 - 1
aa_pos.loc[:,'3nt_pos'] = aa_pos['position'] * 3


# In[ ]:





# In[18]:


#for forward strand gene


# In[19]:


#rank cds for each gene based on cds position and caculate relative positions of first and last bases 


# In[20]:


f_cds = cds_anno[cds_anno['strand']=='+']


# In[21]:


f_cds = f_cds.groupby(f_cds['transcript_id']).apply(lambda x : x.sort_values(by='start')).reset_index(drop=True)


# In[22]:


f_cds['trans_rank'] = f_cds['start'].groupby(f_cds['transcript_id']).rank()


# In[23]:


f_cds['cds_to'] = f_cds['length'].groupby(f_cds['transcript_id']).cumsum()


# In[24]:


f_cds['cds_from'] = f_cds['cds_to'] - f_cds['length'] + 1


# In[25]:


#merge annotation and aa position files based on gene name


# In[26]:


f_pos = pd.merge(f_cds,aa_pos,on='gene_name')


# In[27]:


#distinguish forward aa without splicing & 1_23splicing & 12_3splicing


# In[28]:


nosp_f = f_pos[(f_pos['1nt_pos'] >= f_pos['cds_from']) & (f_pos['3nt_pos'] <= f_pos['cds_to'])]


# In[29]:


sp1_23_f = f_pos[((f_pos['1nt_pos'] < f_pos['cds_from']) & (f_pos['2nt_pos'] >= f_pos['cds_from'])) | 
                  ((f_pos['1nt_pos'] <= f_pos['cds_to']) & (f_pos['2nt_pos'] > f_pos['cds_to']))]
sp12_3_f = f_pos[((f_pos['2nt_pos'] <= f_pos['cds_to']) & (f_pos['3nt_pos'] > f_pos['cds_to'])) | 
                  (f_pos['3nt_pos'] >= f_pos['cds_from']) & (f_pos['2nt_pos'] < f_pos['cds_from'])]


# In[30]:


#get forward aa genome position without splicing


# In[31]:


nosp_f['base1'] = nosp_f['start'] + (
    nosp_f['1nt_pos'] - nosp_f['cds_from']
)
nosp_f['base2'] = nosp_f['base1'] + 1
nosp_f['base3'] = nosp_f['base1'] + 2


# In[32]:


nosp_f.loc[:,'aa_genome_seq'] = nosp_f.apply(
            lambda x: str(fa[x['chr']].seq[x['base1'] - 1: x['base3']]).upper(),
            axis=1)


# In[33]:


nosp_f = nosp_f[nosp_f['aa_genome_seq'].isin(args['c'])]


# In[34]:


#get forward aa position with 1_23 splicing


# In[35]:


sp1_23_f.loc[sp1_23_f['1nt_pos'] == sp1_23_f['cds_to'],'base1'] = sp1_23_f['end']
sp1_23_f = sp1_23_f.fillna(method='ffill',limit=1)
sp1_23_f.loc[sp1_23_f['2nt_pos'] == sp1_23_f['cds_from'],'base2'] = sp1_23_f['start']
sp1_23_f = sp1_23_f.fillna(method='bfill',limit=1)
sp1_23_f['base3'] = sp1_23_f['base2'] + 1


# In[36]:


sp1_23_f = sp1_23_f.dropna(axis=0,how='any')


# In[37]:


sp1_23_f['base1'] = sp1_23_f['base1'].map(lambda x:('%.0f')%x).astype(int)
sp1_23_f['base2'] = sp1_23_f['base2'].map(lambda x:('%.0f')%x).astype(int)
sp1_23_f['base3'] = sp1_23_f['base3'].map(lambda x:('%.0f')%x).astype(int)


# In[38]:


sp1_23_f.loc[:,'aa_genome_seq1'] = sp1_23_f.apply(
            lambda x: str(fa[x['chr']].seq[x['base1'] - 1: x['base1']]).upper(),
            axis=1)
sp1_23_f.loc[:,'aa_genome_seq23'] = sp1_23_f.apply(
            lambda x: str(fa[x['chr']].seq[x['base2'] - 1: x['base3']]).upper(),
            axis=1)


# In[39]:


sp1_23_f.loc[:,'aa_genome_seq'] = sp1_23_f['aa_genome_seq1'].str.cat(sp1_23_f['aa_genome_seq23'])


# In[40]:


sp1_23_f = sp1_23_f[sp1_23_f['aa_genome_seq'].isin(args['c'])]


# In[41]:


#get forward aa position with 12_3 splicing


# In[43]:


sp12_3_f.loc[sp12_3_f['2nt_pos'] == sp12_3_f['cds_to'],'base2'] = sp12_3_f['end']
sp12_3_f = sp12_3_f.fillna(method='ffill',limit=1)
sp12_3_f.loc[sp12_3_f['3nt_pos'] == sp12_3_f['cds_from'],'base3'] = sp12_3_f['start']
sp12_3_f = sp12_3_f.fillna(method='bfill',limit=1)
sp12_3_f['base1'] = sp12_3_f['base2'] - 1

sp12_3_f = sp12_3_f.dropna(axis=0,how='any')

sp12_3_f['base1'] = sp12_3_f['base1'].map(lambda x:('%.0f')%x).astype(int)
sp12_3_f['base2'] = sp12_3_f['base2'].map(lambda x:('%.0f')%x).astype(int)
sp12_3_f['base3'] = sp12_3_f['base3'].map(lambda x:('%.0f')%x).astype(int)


# In[44]:


sp12_3_f.loc[:,'aa_genome_seq12'] = sp12_3_f.apply(
            lambda x: str(fa[x['chr']].seq[x['base1'] - 1: x['base2']]).upper(),
            axis=1)
sp12_3_f.loc[:,'aa_genome_seq3'] = sp12_3_f.apply(
            lambda x: str(fa[x['chr']].seq[x['base3'] - 1: x['base3']]).upper(),
            axis=1)


# In[45]:


sp12_3_f.loc[:,'aa_genome_seq'] = sp12_3_f['aa_genome_seq12'].str.cat(sp12_3_f['aa_genome_seq3'])


# In[46]:


sp12_3_f = sp12_3_f[sp12_3_f['aa_genome_seq'].isin(args['c'])]


# In[47]:


#for reverse strand


# In[48]:


r_cds = cds_anno[cds_anno['strand']=='-']


# In[49]:


r_cds = r_cds.groupby(r_cds['transcript_id']).apply(
    lambda x : x.sort_values(by = 'end',ascending = False)).reset_index(drop = True)


# In[50]:


r_cds['trans_rank'] = r_cds['end'].groupby(r_cds['transcript_id']).rank(ascending = False)


# In[51]:


r_cds['cds_to'] = r_cds['length'].groupby(r_cds['transcript_id']).cumsum()


# In[52]:


r_cds['cds_from'] = r_cds['cds_to'] - r_cds['length'] + 1


# In[53]:


r_pos = pd.merge(r_cds,aa_pos,on='gene_name')


# In[54]:


#distinguish reverse aa without splicing & 1_23splicing & 12_3splicing


# In[55]:


nosp_r = r_pos[(r_pos['1nt_pos'] >= r_pos['cds_from']) & (r_pos['3nt_pos'] <= r_pos['cds_to'])]


# In[56]:


sp1_23_r = r_pos[((r_pos['1nt_pos'] < r_pos['cds_from']) & (r_pos['2nt_pos'] >= r_pos['cds_from'])) | 
                  ((r_pos['1nt_pos'] <= r_pos['cds_to']) & (r_pos['2nt_pos'] > r_pos['cds_to']))]
sp12_3_r = r_pos[((r_pos['2nt_pos'] <= r_pos['cds_to']) & (r_pos['3nt_pos'] > r_pos['cds_to'])) | 
                  (r_pos['3nt_pos'] >= r_pos['cds_from']) & (r_pos['2nt_pos'] < r_pos['cds_from'])]


# In[57]:


#get reverse aa genome position without splicing


# In[58]:


nosp_r['base1'] = nosp_r['end'] - (
    nosp_r['3nt_pos'] - nosp_r['cds_from']
)
nosp_r['base2'] = nosp_r['base1'] + 1
nosp_r['base3'] = nosp_r['base1'] + 2


# In[59]:


nosp_r.loc[:,'aa_genome_seq'] = nosp_r.apply(
            lambda x: str(fa[x['chr']].seq[x['base1'] - 1: x['base3']].reverse_complement()).upper(),
            axis=1)


# In[60]:


nosp_r = nosp_r[nosp_r['aa_genome_seq'].isin(args['c'])]


# In[61]:


#get reverse aa position with 1_23 splicing


# In[62]:


sp1_23_r.loc[sp1_23_r['1nt_pos'] == sp1_23_r['cds_to'],'base3'] = sp1_23_r['start']
sp1_23_r = sp1_23_r.fillna(method='ffill',limit=1)
sp1_23_r.loc[sp1_23_r['2nt_pos'] == sp1_23_r['cds_from'],'base2'] = sp1_23_r['end']
sp1_23_r = sp1_23_r.fillna(method='bfill',limit=1)
sp1_23_r['base1'] = sp1_23_r['base2'] - 1

sp1_23_r = sp1_23_r.dropna(axis=0,how='any')

sp1_23_r['base1'] = sp1_23_r['base1'].map(lambda x:('%.0f')%x).astype(int)
sp1_23_r['base2'] = sp1_23_r['base2'].map(lambda x:('%.0f')%x).astype(int)
sp1_23_r['base3'] = sp1_23_r['base3'].map(lambda x:('%.0f')%x).astype(int)


# In[63]:


sp1_23_r.loc[:,'aa_genome_seq1'] = sp1_23_r.apply(
            lambda x: str(fa[x['chr']].seq[x['base3'] - 1: x['base3']].reverse_complement()).upper(),
            axis=1)
sp1_23_r.loc[:,'aa_genome_seq23'] = sp1_23_r.apply(
            lambda x: str(fa[x['chr']].seq[x['base1'] - 1: x['base2']].reverse_complement()).upper(),
            axis=1)


# In[64]:


sp1_23_r['aa_genome_seq'] = sp1_23_r['aa_genome_seq1'].str.cat(sp1_23_r['aa_genome_seq23'])


# In[65]:


sp1_23_r = sp1_23_r[sp1_23_r['aa_genome_seq'].isin(args['c'])]


# In[66]:


#get reverse K position with 12_3 splicing


# In[67]:


sp12_3_r.loc[sp12_3_r['2nt_pos'] == sp12_3_r['cds_to'],'base2'] = sp12_3_r['start']
sp12_3_r = sp12_3_r.fillna(method='ffill',limit=1)
sp12_3_r.loc[sp12_3_r['3nt_pos'] == sp12_3_r['cds_from'],'base1'] = sp12_3_r['end']
sp12_3_r = sp12_3_r.fillna(method='bfill',limit=1)
sp12_3_r['base3'] = sp12_3_r['base2'] + 1

sp12_3_r = sp12_3_r.dropna(axis=0,how='any')

sp12_3_r['base1'] = sp12_3_r['base1'].map(lambda x:('%.0f')%x).astype(int)
sp12_3_r['base2'] = sp12_3_r['base2'].map(lambda x:('%.0f')%x).astype(int)
sp12_3_r['base3'] = sp12_3_r['base3'].map(lambda x:('%.0f')%x).astype(int)


# In[68]:


sp12_3_r.loc[:,'aa_genome_seq12'] = sp12_3_r.apply(
            lambda x: str(fa[x['chr']].seq[x['base2'] - 1: x['base3']].reverse_complement()).upper(),
            axis=1)
sp12_3_r.loc[:,'aa_genome_seq3'] = sp12_3_r.apply(
            lambda x: str(fa[x['chr']].seq[x['base1'] - 1: x['base1']].reverse_complement()).upper(),
            axis=1)


# In[69]:


sp12_3_r['aa_genome_seq'] = sp12_3_r['aa_genome_seq12'].str.cat(sp12_3_r['aa_genome_seq3'])


# In[73]:


sp12_3_r = sp12_3_r[sp12_3_r['aa_genome_seq'].isin(args['c'])]


# In[ ]:





# In[71]:


##agregate forward and reverse data


# In[156]:


nosp = nosp_f.append(nosp_r)


# In[157]:


nosp = nosp[['chr','feature','strand','gene_name','transcript_id','pro_id',
             'base1','base2','base3','aa_genome_seq','position']]
nosp.columns = ['chr','feature','strand','gene_name','transcript_id','pro_id',
             'base1','base2','base3','aa_genome_seq','aa_position']


# In[159]:


nosp = nosp.drop_duplicates()


# In[ ]:


nosp.to_csv(args['nsp'],sep='\t',index=False)


# In[ ]:





# In[165]:


sp1_23 = sp1_23_f.append(sp1_23_r)


# In[166]:


sp1_23 = sp1_23[['chr','feature','strand','gene_name','transcript_id','pro_id',
             'base1','base2','base3','aa_genome_seq','aa_genome_seq1','aa_genome_seq23','position']]
sp1_23.columns = ['chr','feature','strand','gene_name','transcript_id','pro_id',
             'base1','base2','base3','aa_genome_seq','aa_genome_seq1','aa_genome_seq23','aa_position']


# In[170]:


sp1_23 = sp1_23.drop_duplicates()


# In[ ]:


sp1_23.to_csv(args['sp12'],sep='\t',index=False)


# In[ ]:





# In[172]:


sp12_3 = sp12_3_f.append(sp12_3_r)


# In[173]:


sp12_3 = sp12_3[['chr','feature','strand','gene_name','transcript_id','pro_id',
             'base1','base2','base3','aa_genome_seq','aa_genome_seq12','aa_genome_seq3','position']]
sp12_3.columns = ['chr','feature','strand','gene_name','transcript_id','pro_id',
             'base1','base2','base3','aa_genome_seq','aa_genome_seq12','aa_genome_seq3','aa_position']


# In[175]:


sp12_3 = sp12_3.drop_duplicates()


# In[ ]:


sp12_3.to_csv(args['sp23'],sep='\t',index=False)


# In[ ]:





# In[ ]:




